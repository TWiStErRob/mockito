allprojects { project ->
    plugins.withId("java") {
        project.apply plugin: "jacoco"
        project.jacoco {
            toolVersion = '0.8.8'
        }
    }
}

task mockitoCoverage(type: JacocoReport) {

    allprojects { currentProject ->
        plugins.withId("java") {
            mockitoCoverage.sourceSets currentProject.sourceSets.main
            jacoco {
                test.jacoco.destinationFile = file("${currentProject.buildDir}/jacoco/test.exec")
            }

            mockitoCoverage.executionData(files(test.jacoco.destinationFile).builtBy(test))
        }
    }

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = file("${buildDir}/jacocoHtml")
    }

    doLast {
        def reportFile = new File(reports.html.outputLocation.get().asFile, "index.html")
        logger.lifecycle "Jacoco HTML created: file://${reportFile.toURI().path}"
    }
}

gradle.taskGraph.whenReady {
    mockitoCoverage.classDirectories.setFrom(
        mockitoCoverage.classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: [ "**/internal/util/concurrent/**" ]
            )
        }
    )
}

task coverageReport(dependsOn: ["mockitoCoverage"]) {}
